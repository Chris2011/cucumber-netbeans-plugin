#
# NBS Template for FEATURE
#
# Author: Roland Guem
#
# HINT: Package name is a homage to Cucumber Developers
#
# TOKEN DEFINTIONS -------------------------------------------------------------
#
# Comments
TOKEN:comment:('#' [^ '\n' '\r']*)
#
# Feature
TOKEN:feature:("Feature")
#
TOKEN:business_value:( "In order to" ):<TEXT_MODE>
TOKEN:role:( "As a" | "As an" ):<TEXT_MODE>
TOKEN:some_action:( "I want to" ):<TEXT_MODE>
# Background
TOKEN:background:("Background")
# Scenario
TOKEN:scenario:("Scenario")
# Scenario Outline
TOKEN:scenario_outline:("Scenario Outline")
# Examples
TOKEN:examples:("Examples"|"Scenarios")
#
TOKEN:colon:(":"):<TEXT_MODE>
#
TOKEN:row_delimiter:("|"):<ROW_MODE>
# MULTILINE STRING
TOKEN:pystring:('\"\"\"'):<PYSTRING_MODE>
# STEPS
TOKEN:given:( "Given" ):<STEPS_TEXT_MODE>
TOKEN:and:( "And" ):<STEPS_TEXT_MODE>
TOKEN:when:( "When" ):<STEPS_TEXT_MODE>
TOKEN:then:( "Then" ):<STEPS_TEXT_MODE>
TOKEN:but:( "But" ):<STEPS_TEXT_MODE>
#
TOKEN:string:((" \'"[^ "\'"]* "\'")|("\""[^ "\""]* "\""))
TOKEN:word:( [^ '\n' '\r' '\t' ' ' '\"' '<' '>' '|' '#' ':' '@']* )
TOKEN:tag:('@' [^ ' ' '\t' '\n' '\r']*)
TOKEN:whitespace:( [" " "\t"]+ ) # "\n" "\r"
TOKEN:newline: ('\n')
# Text
<TEXT_MODE> {
    TOKEN:newline:('\n'):<DEFAULT>
    TOKEN:whitespace:( [" " "\t"]+ )
    TOKEN:comment:('#' [^ '\n' '\r']*)
    TOKEN:word:( [^ '\n' '\r' '\t' '#']* )
}
# Text inside Steps
<STEPS_TEXT_MODE> {
    TOKEN:newline:('\n'):<DEFAULT>
    TOKEN:whitespace:( [" " "\t"]+ )
    TOKEN:string:((" \'"[^ "\'"]* "\'")|("\""[^ "\""]* "\""))
    TOKEN:variable:('<'[^ '>']* '>')
    TOKEN:number:( ["0"-"9"]+ (("."|",")["0"-"9"]*)? )
    TOKEN:comment:('#' [^ '\n' '\r']*)
    TOKEN:word:( [^ '\n' '\r' '\t' ' ' '\"' '<' '>' '#']* )
}
# Multiline String
<PYSTRING_MODE> {
    TOKEN:end_pystring:('\"\"\"'):<DEFAULT>
    TOKEN:newline: ('\n')
    TOKEN:whitespace:( [" " "\t"]+ )
    TOKEN:variable:('<'[^ '>']* '>')
    TOKEN:word:( [^ '\n' '\r' '\t' ' ' '<' '>']* )
}
# Row
<ROW_MODE> {
    TOKEN:end: ('\n'):<DEFAULT>
    TOKEN:row_delimiter:("|")
    TOKEN:whitespace:( [" " "\t"]+ )
    TOKEN:string:((" \'"[^ "\'"]* "\'")|("\""[^ "\""]* "\""))
    TOKEN:comment:('#' [^ '\n' '\r']*)
    TOKEN:number:( ["0"-"9"]+ (("."|",")["0"-"9"]*)? )
    TOKEN:word:( [^ '\n' '\r' '\t' ' ' '\"' '|' '#']* )
}
#
# GRAMMER RULES :: SYNTAX DEFINITION -------------------------------------------
#
# 0..* Features are in one File (restrict to 1)
S = (Feature)*;
# Feature
Feature = FeatureDefinition BackgroundPart ScenarioPart;
BackgroundPart = (Background)*;
ScenarioPart = (Scenario)*;
FeatureDefinition = <feature> <colon> [FeatureDescription] (FeatureBlock)*;
FeatureDescription = Text;
# Feature Block
FeatureBlock = BusinessValueDefinition | RoleDefinition | SomeActionDefinition;
# Business Value
BusinessValueDefinition = <business_value> Text;
# Role
RoleDefinition = <role> Text;
# Some Action
SomeActionDefinition = <some_action> Text;
# Background
Background = <background> <colon> [Description] [BackgroundBlock];
# a Background has only Given Statments
BackgroundBlock = GivenStatement;
# Scenario
Scenario = BasicScenario | TableScenario;
BasicScenario = <scenario> <colon> [ScenarioDescription] ScenarioBlock;
TableScenario = <scenario_outline> <colon> [ScenarioDescription] ScenarioBlock ExamplesBlocks;
ScenarioDescription = Text;
# Scenario Block
#ScenarioBlock = [GivenStatement] [WhenStatement] [ThenStatement];
# freedom of choice
ScenarioBlock = (Statements)*;
Statements = GivenStatement | WhenStatement | ThenStatement ;
# Given
GivenStatement = <given> Statement (AndStatement|ButStatement)*;
# When
WhenStatement = <when> Statement (AndStatement|ButStatement)*;
# Then
ThenStatement = <then> Statement (AndStatement|ButStatement)*;
# And
AndStatement = <and> Statement;
ButStatement = <but> Statement;
# Statement is more or less Text followed by Extras if necessary
Statement = Text [Extras];
#Extras
Extras = PyString | TableBlock;
# Examples and Tables
ExamplesBlocks = ExamplesBlock (ExamplesBlock)*;
ExamplesBlock = <examples> <colon> [Description] TableBlock;
Description = Text;
TableBlock = TableHeader TableRows;
TableHeader = Row;
TableRows = (Row)*;
Row = <row_delimiter> ([Text] <row_delimiter>)+ <end>;
#
PyString = <pystring> Text <end_pystring>;
# Text
Text = (Word | <string> | <variable>) (Text)*;
Word = <word> | <number> ;
#
SKIP:whitespace
SKIP:comment
SKIP:newline
SKIP:tag
# ------------------------------------------------------------------------------
#
COLOR:comment: {
    default_coloring: "identifier";
    foreground_color:"#8F8F8F";
}
COLOR:tag: {
    default_coloring: "identifier";
    foreground_color:"#CC3333";
    font_type: "bold";
}
#
# COLOR FOR FEATURE ------------------------------------------------------------
#
COLOR:feature: {
    default_coloring: "identifier";
    foreground_color: info.cukes.feature.options.ColorLibrary.getFeatureColor;
    font_type: "bold italic";
}
COLOR:business_value: {
    default_coloring: "identifier";
    foreground_color:"#3366CC";
    font_type: "bold italic";
}
COLOR:role: {
    default_coloring: "identifier";
    foreground_color:"#3366CC";
    font_type: "bold italic";
}
COLOR:some_action: {
    default_coloring: "identifier";
    foreground_color:"#3366CC";
    font_type: "bold italic";
}
COLOR:FeatureDescription: {
    font_type: "bold";
}
COLOR:BusinessValueDefinition: {
    font_type: "bold";
}
COLOR:RoleDefinition: {
    font_type: "bold";
}
COLOR:SomeActionDefinition: {
    font_type: "bold";
}
#
# COLOR FOR SCENARIO -----------------------------------------------------------
#
COLOR:scenario: {
    default_coloring: "identifier";
    foreground_color:info.cukes.feature.options.ColorLibrary.getScenarioColor;
    font_type: "bold italic";
}
COLOR:scenario_outline: {
    default_coloring: "identifier";
    foreground_color:info.cukes.feature.options.ColorLibrary.getScenarioColor;
    font_type: "bold italic";
}
COLOR:ScenarioDescription: {
    font_type: "bold";
}
COLOR:TableHeader: {
    default_coloring: "identifier";
    foreground_color:"#336600";
    font_type: "bold";
}
COLOR:examples: {
    default_coloring: "identifier";
    foreground_color:info.cukes.feature.options.ColorLibrary.getExamplesColor;
    font_type: "bold italic";
}
#
# COLOR FOR BACKGROUND ---------------------------------------------------------
#
COLOR:background: {
    default_coloring: "identifier";
    foreground_color:info.cukes.feature.options.ColorLibrary.getBackgroundColor;
    font_type: "bold italic";
}
#
# Multiline String -------------------------------------------------------------
#
COLOR:PyString: {
    default_coloring: "identifier";
    foreground_color:info.cukes.feature.options.ColorLibrary.getPyStringsColor;
}
#
# COLOR FOR GIVEN/WHEN/THEN & AND/BUT ----------------------------------------------
#
COLOR:given: {
    default_coloring: "identifier";
    foreground_color:info.cukes.feature.options.ColorLibrary.getStepsColor;
}
COLOR:when: {
    default_coloring: "identifier";
    foreground_color:info.cukes.feature.options.ColorLibrary.getStepsColor;
}
COLOR:then: {
    default_coloring: "identifier";
    foreground_color:info.cukes.feature.options.ColorLibrary.getStepsColor;
}
COLOR:and: {
    default_coloring: "identifier";
    foreground_color:info.cukes.feature.options.ColorLibrary.getStepsColor;
}
COLOR:but: {
    default_coloring: "identifier";
    foreground_color:info.cukes.feature.options.ColorLibrary.getStepsColor;
}
#
# ------------------------------------------------------------------------------
#
COLOR:variable: {
    default_coloring:"string";
    foreground_color:info.cukes.feature.options.ColorLibrary.getVariablesColor;
}
#
COLOR:number: {
    default_coloring:"string";
    foreground_color:info.cukes.feature.options.ColorLibrary.getNumbersColor;
}
#
COLOR:string: {
    default_coloring:"string";
    foreground_color:info.cukes.feature.options.ColorLibrary.getStringsColor;
}
#
# COMPLETE ---------------------------------------------------------------------
# brace completion
COMPLETE "{:}"
COMPLETE "(:)"
COMPLETE "[:]"
COMPLETE "\":\""
COMPLETE "\':\'"

# COMPLETION -------------------------------------------------------------------
# code completion
COMPLETION:given, when, then, and, scenario, feature, whitespace, newline: {
    text1:"Feature:";
    text2:"In order to";
    text3:"As a";
    text4:"I want to";
    text5:"Scenario:";
    text6:"Given";
    text7:"And";
    text8:"When";
    text9:"Then";
    text10:"But";
    text11:"Examples:";
    text12:"Background:";
    text13:"Scenario Outline:";
}

# BRACE ------------------------------------------------------------------------
# brace matching
BRACE "{:}"
BRACE "(:)"
BRACE "[:]"
BRACE "\":\""
BRACE "\':\'"

# NAVIGATOR --------------------------------------------------------------------
# navigator

NAVIGATOR:Feature: {
    display_name: info.cukes.feature.Feature.featureName;
    icon: info.cukes.feature.Feature.featureIcon;
}

NAVIGATOR:Scenario: {
    display_name: info.cukes.feature.Feature.scenarioName;
    icon: info.cukes.feature.Feature.scenarioIcon;
}

NAVIGATOR:TableBlock: {
    display_name: "Examples";
    icon: info.cukes.feature.Feature.examplesIcon;
}

NAVIGATOR:Background: {
    display_name: info.cukes.feature.Feature.backgroundName;
    icon: info.cukes.feature.Feature.backgroundIcon;
}

# INDENT -----------------------------------------------------------------------
# indentation
INDENT "Feature:.*"
#INDENT "Scenario:\\n\\n"
#INDENT "Background:<end_background>"

# TOOLTIP ----------------------------------------------------------------------
#TOOLTIP:Feature:"Feature"
#TOOLTIP:Scenario:"Scenario"
#TOOLTIP:BusinessValueDefinition:"What is the Business Value of this Feature?"
#TOOLTIP:RoleDefinition:"Who are you or the person running this Scenarios?"
#TOOLTIP:SomeActionDefintion:"What do you do to reach this Goal?"

# FOLD -------------------------------------------------------------------------

FOLD:FeatureBlock
FOLD:BackgroundBlock
FOLD:ScenarioBlock
FOLD:TableBlock

# EOF --------------------------------------------------------------------------
